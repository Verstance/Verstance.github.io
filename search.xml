<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript入门</title>
    <url>/2020/10/26/JavaScript%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1 基础语法"></a>1 基础语法</h3><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=</span><br><span class="line">==  <span class="comment">//等于（类型不同，值一样，也会判断为true）</span></span><br><span class="line">=== <span class="comment">//绝对等于（类型一样，值一样，结果才为true）</span></span><br></pre></td></tr></table></figure>

<p>这是一个JS的缺陷，坚持不要使用 == 比较</p>
<p>须知：</p>
<ul>
<li>NaN===NaN返回false，NaN与所有数值都不相等，包括自己</li>
<li>只能通过isNaN(NaN)来判断这个数是否是NaN</li>
</ul>
<p>尽量避免使用浮点数进行运算，存在精度问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span>-<span class="number">2</span>/<span class="number">3</span>))&lt;<span class="number">0.000000001</span></span><br></pre></td></tr></table></figure>

<h4 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h4><p>全局变量 i = 1;</p>
<p>局部变量 var i = 1; let i = 1;（ES6建议使用let）</p>
<p>严格检查模式</p>
<p>‘use strict’; 严格检查模式，预防JavaScript的随意性导致产生的一些问题</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>多行字符串：</p>
<p>`XXX</p>
<p>XXX`</p>
<p>模板字符串</p>
<p>`hello,${变量}`</p>
<p>str.length str[0] str.toUpperCase() str.toLowerCase()</p>
<p>str.subsring(X,Y)返回str[X,Y)</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="literal">null</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>取数组下标，如果越界(arr[8]),就会提示<code>undifined</code></p>
<p>假如给数组的长度arr.length赋值，数组大小就会发生变化</p>
<p>indexOf：通过元素获得下标索引</p>
<p>slice()截取Array的一部分，类似字符串中的substring</p>
<p>arr.push(),arr.pop() // 尾部</p>
<p>arr.unshift(),shift() // 头部 </p>
<p>arr.sort()</p>
<p>arr.reverse()</p>
<p>arr.concat() // 不会改变原数组</p>
<p>arr.join(‘-‘) // 连接符 打印</p>
<p>arr.fill(X)</p>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><blockquote>
<p>每个属性之间使用逗号隔开，最后一个不需要添加</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    tags:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象赋值：person.name = “XXX”</p>
<p>取对象的值：person.name</p>
<p>使用一个不存在的对象属性，不会报错！undefined</p>
<p>动态删除，添加对象的属性：delete person.name person.XXX=XXX</p>
<p>JavaScript中所有键都是字符串，值是任意对象</p>
<p>判断属性值是否在这个对象中！’XXX’ in XXX</p>
<p>判断一个属性是否是这个对象<strong>自身</strong>拥有的 hasOwnProperty()</p>
<h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;  <span class="comment">// ES5.1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(value)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> arr</span>)</span>&#123;   <span class="comment">// i为数组下标</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> e <span class="keyword">of</span> arr</span>)</span>&#123;   <span class="comment">// e为数组元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h4><p>ES6的新特性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">90</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span>,<span class="number">123</span>); <span class="comment">// 新增</span></span><br><span class="line">map.delete(<span class="string">&#x27;XXX&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 去重</span></span><br><span class="line">set.add(x);</span><br><span class="line">set.delete(x);</span><br><span class="line">set.has(x);</span><br></pre></td></tr></table></figure>

<p>iterater ES6新特性</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>)</span>&#123;	<span class="comment">//定义方式一</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;	<span class="comment">//定义方式二</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有执行return，函数执行完也会返回结果：undefined</p>
<p>JavaScript可以传任意参数，也可以不传参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//手动抛出异常</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> x != <span class="string">&#x27;number&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;Not a Number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">x &gt;= <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>arguments</code>参数表示函数传入的所有参数，是一个数组</p>
<p><code>rest</code>剩余参数，只能写在最后面，必须用…表示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a,b,...rest</span>)</span>&#123;</span><br><span class="line">    consloe(<span class="string">&quot;a-&gt;&quot;</span>+a);</span><br><span class="line">    consloe(<span class="string">&quot;b-&gt;&quot;</span>+b);</span><br><span class="line">    consloe(<span class="string">&quot;rest-&gt;&quot;</span>+rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局对象-window"><a href="#全局对象-window" class="headerlink" title="全局对象 window"></a>全局对象 window</h4><p>所有全局变量都绑定在全局对象window上的</p>
<p>window.x（全局变量）</p>
<p>windows.alert(window.x)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert;</span><br><span class="line"><span class="comment">//old_alert(x);</span></span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">123</span>); <span class="comment">//失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="built_in">window</span>.alert = old_alert;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<p>全局变量→冲突</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> App = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">App.name = <span class="string">&#x27;XXX&#x27;</span>;</span><br><span class="line">App.add = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把自己代码全部放入自己定义的唯一命名空间中，降低全局命名冲突的问题（JQuery）</p>
<p>ES6建议使用<code>let</code>关键字去定义局部作用域的变量（解决局部作用域冲突的问题），使用<code>const</code>定义常量<code>const PI = &#39;3.14&#39;</code></p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> XXX = &#123;</span><br><span class="line">	name:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">	birth:<span class="number">2020</span>,</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">	age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">XXX.name</span><br><span class="line">XXX.age()</span><br></pre></td></tr></table></figure>

<p>apply在js中可以控制this指向，通过 apply() 方法，能够编写用于不同对象的方法。<code>函数.apply(对象,参数列表)</code>this指向apply的对象</p>
<h3 id="2-内部对象"><a href="#2-内部对象" class="headerlink" title="2 内部对象"></a>2 内部对象</h3><blockquote>
<p>标准对象</p>
</blockquote>
<p>number, string, boolean, object</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span></span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line"><span class="string">&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-Date"><a href="#2-1-Date" class="headerlink" title="2.1 Date"></a>2.1 Date</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.getFullYear(); <span class="comment">// 年</span></span><br><span class="line">now.getMonth(); <span class="comment">//月（0-11）</span></span><br><span class="line">now.getDate(); <span class="comment">//日</span></span><br><span class="line">now.getDay(); <span class="comment">//星期几</span></span><br><span class="line">now.getHours(); <span class="comment">//时</span></span><br><span class="line">now.getMinutes(); <span class="comment">//分</span></span><br><span class="line">now.getSeconds(); <span class="comment">//秒</span></span><br><span class="line">now.getTime(); <span class="comment">//时间戳 1970.1.1 00:00 - ms</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">113224222</span>)) <span class="comment">//时间戳转为时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为字符串</span></span><br><span class="line">now.toLocaleString()</span><br><span class="line">now.toGMTString()</span><br></pre></td></tr></table></figure>

<h4 id="2-2-JSON"><a href="#2-2-JSON" class="headerlink" title="2.2 JSON"></a>2.2 JSON</h4><blockquote>
<p><em>JSON</em>(JavaScript Object Notation, JS 对象表示法) 是一种轻量级的数据交换格式。</p>
</blockquote>
<p>特点：简洁，清晰的层次结构；易于人阅读和编写，同时也易于机器解析和生成，有效提升网络传输效率</p>
<p>在JavaScript中一切皆对象，任何JS支持的类型都可以用JSON来表示</p>
<p>格式：</p>
<ul>
<li>对象：{}</li>
<li>数组：[]</li>
<li>键值对：key:value</li>
</ul>
<p>JSON字符串和JS对象的转化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">&quot;XXX&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    sex: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对象转化为JSON对象</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify()</span><br><span class="line"></span><br><span class="line"><span class="comment">//json字符串转化为对象,参数为json字符串</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;XXX&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Ajax"><a href="#2-3-Ajax" class="headerlink" title="2.3 Ajax"></a>2.3 Ajax</h4><ul>
<li><p>原生的js写法 xhr异步请求</p>
</li>
<li><p>JQuery封装好的方法 $(“#name”).ajax(“”)</p>
</li>
<li><p>axios 请求</p>
</li>
</ul>
<h3 id="3-面向对象编程"><a href="#3-面向对象编程" class="headerlink" title="3 面向对象编程"></a>3 面向对象编程</h3><p>原型：子类（对象）.__proto__ = 父类（原型对象）; //子类的原型是父类</p>
<p>随意指向</p>
<p><code>class</code>关键字是在ES6引入的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pupil</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,grade</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;我是一名小学生&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line">xiaoming.hello();</span><br></pre></td></tr></table></figure>



<p>原型链：<em>_proto_\</em></p>
<p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/3174701-18a76d28c0a9ea1b" alt="img"></p>
<h3 id="4-操作BOM对象（重点）"><a href="#4-操作BOM对象（重点）" class="headerlink" title="4 操作BOM对象（重点）"></a>4 操作BOM对象（重点）</h3><blockquote>
<p>BOM(Browser Object Model) 是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。</p>
</blockquote>
<p>浏览器：</p>
<p>内核：IE， Chrome, Safari, FireFox</p>
<p>三方：QQ，360</p>
<h4 id="4-1-window"><a href="#4-1-window" class="headerlink" title="4.1 window"></a>4.1 window</h4><p>window代表浏览器窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 调整浏览器窗口大小</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight</span><br><span class="line"><span class="built_in">window</span>.innerWidth</span><br><span class="line"><span class="built_in">window</span>.outerHeight</span><br><span class="line"><span class="built_in">window</span>.innerWidth</span><br></pre></td></tr></table></figure>

<h4 id="4-2-navigator"><a href="#4-2-navigator" class="headerlink" title="4.2 navigator"></a>4.2 navigator</h4><p>navigator封装了浏览器的信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.appName</span><br><span class="line">navigator.appVersion</span><br><span class="line">navigator.userAgent</span><br><span class="line">navigator.platform</span><br></pre></td></tr></table></figure>

<p>一般不使用，因为会被人为修改，不建议用这些属性来判断浏览器版本</p>
<h4 id="4-3-screen"><a href="#4-3-screen" class="headerlink" title="4.3 screen"></a>4.3 screen</h4><p>screen代表屏幕尺寸</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line">screen.height</span><br></pre></td></tr></table></figure>

<h4 id="4-4-location（重要）"><a href="#4-4-location（重要）" class="headerlink" title="4.4 location（重要）"></a>4.4 location（重要）</h4><p>location代表当前页面的URL信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">host: <span class="string">&quot;www.bilibili.com&quot;</span></span><br><span class="line">hostname: <span class="string">&quot;www.bilibili.com&quot;</span></span><br><span class="line">href: <span class="string">&quot;https://www.bilibili.com/video/BV1JJ41177di?p=19&quot;</span></span><br><span class="line">protocol: <span class="string">&quot;https:&quot;</span></span><br><span class="line">reload: ƒ reload() <span class="comment">// 刷新页面</span></span><br><span class="line"><span class="comment">// 设置新的地址</span></span><br><span class="line">location.assign(<span class="string">&#x27;https://...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-5-document"><a href="#4-5-document" class="headerlink" title="4.5 document"></a>4.5 document</h4><p>document代表当前的页面（document.），HTML DOM文档树</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//获取具体的文档树节点</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> dl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br><span class="line"><span class="string">&quot;finger=158939783; _uuid=C56A5201-E5AB-30A7-6A3D-33573CFAEC4B75115infoc; buvid3=2DE4F72B-D52C-4628-B6F6-D25A79D4DFBD155818infoc; sid=jsr4r70q; im_notify_type_775959=0; LIVE_BUVID=AUTO6215819975268326; LIVE_PLAYER_TYPE=2; DedeUserID=775959; DedeUserID__ckMd5=5a93072db131a757; bili_jct=e4c30825e9523f0d624509aa21012a7e; rpdid=|(J~RllJRmlY0J&#x27;ulm)RkRm)l; blackside_state=1; CURRENT_FNVAL=80; bp_t_offset_775959=434460479141307658; Hm_lvt_8a6e55dbd2870f0f5bc9194cddf32a02=1600696828; CURRENT_QUALITY=80; bp_video_offset_775959=438421933640865406; finger=158939783; PVID=3&quot;</span></span><br></pre></td></tr></table></figure>

<p>劫持cookie原理</p>
<p><a href="http://www.taobao.com/">www.taobao.com</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;aa.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 恶意人员：获取你的cookie上传到他的服务器 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务器可以设置：httpOnly（安全）</p>
<h4 id="4-6-history"><a href="#4-6-history" class="headerlink" title="4.6 history"></a>4.6 history</h4><p>history代表浏览器的历史记录（不建议使用）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.back()</span><br><span class="line">history.forward()</span><br></pre></td></tr></table></figure>

<h3 id="5-操作DOM对象（重点）"><a href="#5-操作DOM对象（重点）" class="headerlink" title="5 操作DOM对象（重点）"></a>5 操作DOM对象（重点）</h3><blockquote>
<p>文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。它是一种与平台和语言无关的应用程序接口(API),它可以动态地访问程序和脚本,更新其内容、结构和www文档的风格(目前,HTML和XML文档是通过说明部分定义的)。</p>
</blockquote>
<p>浏览器网页就是一个DOM树形结构，要操作一个DOM节点，就必须先获得这个DOM节点</p>
<h4 id="5-1-获得DOM节点"><a href="#5-1-获得DOM节点" class="headerlink" title="5.1 获得DOM节点"></a>5.1 获得DOM节点</h4><p>标签选择器：<code>document.getElementsByTagName(&#39;h1&#39;)</code>（返回数组）</p>
<p>id选择器：<code>documen.getElementById(&#39;id&#39;)</code></p>
<p>class选择器：<code>document.getElementByClassName(&#39;class&#39;)</code>（返回数组）</p>
<p>获得子节点：<code>Node.children</code></p>
<h4 id="5-2-更新DOM节点"><a href="#5-2-更新DOM节点" class="headerlink" title="5.2 更新DOM节点"></a>5.2 更新DOM节点</h4><p>修改文本值：</p>
<p><code>Node.innerText = &#39;xxx&#39;</code></p>
<p><code>Node.innerHTML = &#39;xxx&#39;</code>（超文本）</p>
<p>设置样式：</p>
<p><code>Node.style.color/fontSize/... = &#39;xxx&#39;</code>（驼峰命名）</p>
<h4 id="5-3-删除DOM节点"><a href="#5-3-删除DOM节点" class="headerlink" title="5.3 删除DOM节点"></a>5.3 删除DOM节点</h4><p>先获取父节点，再通过父节点删除自己</p>
<p><code>Node.parentElement.removeChild(Node)</code>（只能通过id选择器选择节点删除）</p>
<p>注意：删除节点过程中，父节点的children是动态变化的</p>
<h4 id="5-4-插入DOM节点"><a href="#5-4-插入DOM节点" class="headerlink" title="5.4 插入DOM节点"></a>5.4 插入DOM节点</h4><p>获得的DOM节点若为空节点，可以通过innerText增加元素</p>
<p>追加节点：<code>Node1.append(Node2)</code></p>
<p>创建新节点：<code>document.createElement(&#39;p&#39;)</code></p>
<p>设置节点属性：<code>Node = setAttribute(&#39;属性名&#39;,&#39;属性值&#39;)</code></p>
<p>插入节点：<code>Node.insertBefore(newItem,existingItem);</code></p>
<h3 id="6-操作表单（验证）"><a href="#6-操作表单（验证）" class="headerlink" title="6 操作表单（验证）"></a>6 操作表单（验证）</h3><p>表单的目的：提交信息</p>
<p>获得要提交的信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">input_text.value</span><br><span class="line">boy_radio.checked <span class="comment">//boolean</span></span><br></pre></td></tr></table></figure>

<p>MD5加密密码</p>
<p>表单绑定提交事件</p>
<p>onsubmit= 绑定一个提交检测的函数，返回布尔值（return false：不提交表单）</p>
<h3 id="7-jQuery"><a href="#7-jQuery" class="headerlink" title="7 jQuery"></a>7 jQuery</h3><p>公式：$(selector).action()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//当网页元素加载完毕之后，响应事件</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//↑简写,获取坐标</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;mouseMove&#x27;</span>).text(<span class="string">&#x27;x:&#x27;</span>+e.pageX+<span class="string">&#x27;y:&#x27;</span>+e.pageY)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>文档工具站：<a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></p>
<p>操作DOM：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).css(&#123;<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>&#125;)</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[name=python]&#x27;</span>).show()/hide()</span><br><span class="line">$(<span class="built_in">window</span>).width</span><br></pre></td></tr></table></figure>



<p>LayUI 弹窗组件</p>
<p>ElementUI 样式好看</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程入门</title>
    <url>/2020/10/26/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><p>计算机网络：地理位置不同 多台计算机 连接 通信 共享</p>
<p><strong>网络编程的目的：</strong>数据交换，通信</p>
<p><strong>如何实现多台主机之间的数据通信：</strong></p>
<ol>
<li>准确定位网络上的一台主机以及该主机的某个资源（IP：Port）</li>
<li>传输数据？</li>
</ol>
<p>JavaWeb：网页编程  B/S</p>
<p>网络编程：TCP/IP      C/S</p>
<h3 id="2-网络通信的要素"><a href="#2-网络通信的要素" class="headerlink" title="2 网络通信的要素"></a>2 网络通信的要素</h3><p>实现网络通信需要知道通信双方地址（ip、端口号）</p>
<p>规则：网络通信协议</p>
<p>TCP/IP参考模型：</p>
<p><img src="https://images2015.cnblogs.com/blog/750327/201608/750327-20160822230932011-1299422087.jpg" alt="img"></p>
<p>网络编程专门针对传输层（TCP/IP）</p>
<h3 id="3-IP"><a href="#3-IP" class="headerlink" title="3 IP"></a>3 IP</h3><p>ip地址：InetAddress</p>
<ul>
<li>唯一定位一台网络上的计算机</li>
<li>127.0.0.1：本机localhost</li>
<li>ip地址的分类：<ul>
<li>ipv4/ipv6<ul>
<li>ipv4：10.164.120.176    4个字节组成，0~255，42亿中30亿在北美，亚洲4亿，2011年就用尽</li>
<li>ipv6：fe80::a1a2:85b0:e7d9:58f1%7  128位，8个无符号整数  </li>
</ul>
</li>
<li>公网（互联网） 私网（局域网）<ul>
<li>ABCD类地址</li>
<li>192.168.xx.xx 专门给组织内部使用的</li>
</ul>
</li>
</ul>
</li>
<li>域名→记忆IP问题！</li>
</ul>
<h3 id="4-端口"><a href="#4-端口" class="headerlink" title="4 端口"></a>4 端口</h3><p>端口表示计算机上的一个程序的进程：</p>
<ul>
<li><p>不同进程有不同的端口号！（不能冲突）用来区分进程！</p>
</li>
<li><p>范围：0~65535</p>
</li>
<li><p>TCP，UDP：65535*2 单个协议下，端口号不能冲突</p>
</li>
<li><p>端口分类</p>
<ul>
<li><p>公有端口 0~1023</p>
<ul>
<li>HTTP：80</li>
<li>HTTPS：443</li>
<li>FTP：21</li>
<li>Telnet：23</li>
</ul>
</li>
<li><p>程序注册端口：1024~49151 分配给用户或者程序</p>
<ul>
<li>Tomcat：8080</li>
<li>MySQL：3306</li>
<li>Oracle：1521</li>
</ul>
</li>
<li><p>动态/私有端口：49152~65535</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="comment">#查看所有端口</span></span><br><span class="line">netstat -ano|findstr <span class="string">&quot;端口号&quot;</span> <span class="comment">#查看指定的端口</span></span><br><span class="line">tasklist|findstr <span class="string">&quot;端口号&quot;</span> <span class="comment">#查看指定端口的进程</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="5-通信协议"><a href="#5-通信协议" class="headerlink" title="5 通信协议"></a>5 通信协议</h3><p>协议：约定</p>
<p><strong>网络通信协议：</strong>速率，传输码率，代码结构，传输控制……</p>
<p><strong>TCP/IP协议簇</strong></p>
<p>重要：</p>
<ul>
<li>TCP：传输控制协议</li>
<li>UDP：用户数据报协议</li>
</ul>
<p><strong>TCP vs UDP</strong></p>
<p>打电话~TCP</p>
<ul>
<li><p>连接，稳定</p>
</li>
<li><p>三次握手，四次挥手</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最少需要三次，保证稳定连接！</span><br><span class="line">A:你瞅啥？</span><br><span class="line">B:瞅你咋地？</span><br><span class="line">A:干一场！</span><br><span class="line"></span><br><span class="line">A:我要走了</span><br><span class="line">B:你真的要走了吗？</span><br><span class="line">B:你真的真的要走了吗？</span><br><span class="line">A:我真的真的要走了！</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdn.net/20180717202520531?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p><img src="https://img-blog.csdn.net/20180717204202563?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4OTUwMzE2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
</li>
<li><p>客户端、服务端</p>
</li>
<li><p>传输完成，释放连接，效率低</p>
</li>
</ul>
<p>发短信~UDP</p>
<ul>
<li>不连接，不稳定</li>
<li>客户端、服务器：没有明确的界限</li>
<li>不管有没有准备好，都可以发给你</li>
<li>导弹</li>
<li>DDoS：洪水攻击（饱和攻击）</li>
</ul>
<h3 id="6-TCP"><a href="#6-TCP" class="headerlink" title="6 TCP"></a>6 TCP</h3><h4 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h4><p>客户端</p>
<ol>
<li>通过Socket连接服务器</li>
<li>发送消息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		InetAddress serverIP = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">0</span>;</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.得知服务器地址</span></span><br><span class="line">			serverIP = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">			port = <span class="number">9999</span>;</span><br><span class="line">			<span class="comment">//2.创建一个socket连接</span></span><br><span class="line">			socket = <span class="keyword">new</span> Socket(serverIP,port);</span><br><span class="line">			<span class="comment">//3.发送消息</span></span><br><span class="line">			os = socket.getOutputStream();</span><br><span class="line">			os.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					os.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					socket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务器端</p>
<ol>
<li>建立服务端口</li>
<li>通过accept等待用户连接</li>
<li>接收用户消息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		InputStream is = <span class="keyword">null</span>;</span><br><span class="line">		ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.有地址</span></span><br><span class="line">			serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">			<span class="comment">//2.等待客户端连接</span></span><br><span class="line">			socket = serverSocket.accept();</span><br><span class="line">			<span class="comment">//3.读取客户端的消息</span></span><br><span class="line">			is = socket.getInputStream();</span><br><span class="line">			<span class="comment">//管道流</span></span><br><span class="line">			baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">			<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">				baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(baos.toString());</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="comment">//关闭资源</span></span><br><span class="line">			<span class="keyword">if</span>(baos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					baos.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					is.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					serverSocket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>



<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>服务器端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA_2_3.portable.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub	</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.创建服务</span></span><br><span class="line">			ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">			<span class="comment">//2.监听客户端连接</span></span><br><span class="line">			Socket socket = serverSocket.accept();</span><br><span class="line">			<span class="comment">//3.读取输入流</span></span><br><span class="line">			InputStream is = socket.getInputStream();</span><br><span class="line">			<span class="comment">//4.文件输出</span></span><br><span class="line">			FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;receive.jpg&quot;</span>));</span><br><span class="line">			<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">				fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//5.关闭资源</span></span><br><span class="line">			is.close();</span><br><span class="line">			fos.close();</span><br><span class="line">			socket.close();</span><br><span class="line">			serverSocket.close();					</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1.创建一个socket连接</span></span><br><span class="line">			Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">9999</span>);</span><br><span class="line">			<span class="comment">//2.创建一个输出流</span></span><br><span class="line">			OutputStream os = socket.getOutputStream();</span><br><span class="line">			<span class="comment">//3.读取文件</span></span><br><span class="line">			FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;dog.jpg&quot;</span>));</span><br><span class="line">			<span class="comment">//4.写出文件</span></span><br><span class="line">			<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len=fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">				os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//5.关闭资源</span></span><br><span class="line">			fis.close();</span><br><span class="line">			os.close();</span><br><span class="line">			socket.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端（Tomcat）</p>
<p>客户端（浏览器）</p>
<h3 id="7-UDP"><a href="#7-UDP" class="headerlink" title="7 UDP"></a>7 UDP</h3><p>发短信：不用连接，需要知道对方地址</p>
<h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><p>发送端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不需要连接服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">//1.建立一个Socket</span></span><br><span class="line">	DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">	<span class="comment">//2.建个包	</span></span><br><span class="line">	String msg = <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">	InetAddress localhost = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> port = <span class="number">9090</span>;</span><br><span class="line">	<span class="comment">//数据，数据的长度起始，发送给谁</span></span><br><span class="line">	DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),<span class="number">0</span>,msg.getBytes().length,localhost,port);</span><br><span class="line">	<span class="comment">//3.发送包</span></span><br><span class="line">	socket.send(packet);</span><br><span class="line">	<span class="comment">//4.关闭流</span></span><br><span class="line">	socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还是要等待客户端的连接！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//开放端口</span></span><br><span class="line">		DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">		<span class="comment">//接收数据包</span></span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length); <span class="comment">//接收</span></span><br><span class="line">		socket.receive(packet);<span class="comment">//阻塞接收</span></span><br><span class="line">		System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">		System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">		<span class="comment">//关闭连接</span></span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="循环发送消息"><a href="#循环发送消息" class="headerlink" title="循环发送消息"></a>循环发送消息</h4><p>发送端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//1.建立一个Socket</span></span><br><span class="line">		DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">		<span class="comment">//准备数据：控制台读取</span></span><br><span class="line">		BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="comment">//2.建个包	</span></span><br><span class="line">			String data = reader.readLine();</span><br><span class="line">			<span class="keyword">byte</span>[] datas = data.getBytes();		</span><br><span class="line">			<span class="comment">//数据，数据的长度起始，发送给谁</span></span><br><span class="line">			DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>,<span class="number">6666</span>));</span><br><span class="line">			<span class="comment">//3.发送包</span></span><br><span class="line">			socket.send(packet);</span><br><span class="line">			<span class="keyword">if</span>(data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="comment">//4.关闭流</span></span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.建立一个Socket</span></span><br><span class="line">		DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="comment">//准备接收包裹</span></span><br><span class="line">			<span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,<span class="number">0</span>,container.length);</span><br><span class="line">			socket.receive(packet);<span class="comment">//阻塞式接收包裹</span></span><br><span class="line">			<span class="comment">//断开连接 bye</span></span><br><span class="line">			<span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">			String receiveData = <span class="keyword">new</span> String(data,<span class="number">0</span>,data.length).trim();</span><br><span class="line">			System.out.println(receiveData);</span><br><span class="line">			<span class="keyword">if</span>(receiveData.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="comment">//关闭流</span></span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在线咨询：两个人既可以是发送端也可以是接收端（多线程）</p>
<p>线程TalkSend</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">	BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> fromPort;</span><br><span class="line">	<span class="keyword">private</span> String toIP;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TalkSend</span><span class="params">(<span class="keyword">int</span> fromPort, String toIP, <span class="keyword">int</span> toPort)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.fromPort = fromPort;</span><br><span class="line">		<span class="keyword">this</span>.toIP = toIP;</span><br><span class="line">		<span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> DatagramSocket(fromPort);</span><br><span class="line">			reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			String data;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				data = reader.readLine();</span><br><span class="line">				<span class="keyword">byte</span>[] datas = data.getBytes();		</span><br><span class="line">				DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,<span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.toIP,<span class="keyword">this</span>.toPort));</span><br><span class="line">				socket.send(packet);</span><br><span class="line">				<span class="keyword">if</span>(data.equals(<span class="string">&quot;bye&quot;</span>))&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;	</span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程TalkReceive</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">	<span class="keyword">private</span> String msgFrom;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(<span class="keyword">int</span> port,String msgFrom)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.port = port;</span><br><span class="line">		<span class="keyword">this</span>.msgFrom = msgFrom;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">//准备接收包裹</span></span><br><span class="line">				<span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">				DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container, <span class="number">0</span>,container.length);</span><br><span class="line">				socket.receive(packet);<span class="comment">//阻塞式接收包裹</span></span><br><span class="line">				<span class="comment">//断开连接 bye</span></span><br><span class="line">				<span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">				String receiveData = <span class="keyword">new</span> String(data, <span class="number">0</span>, data.length).trim();</span><br><span class="line">				System.out.println(msgFrom+<span class="string">&quot;：&quot;</span>+receiveData);</span><br><span class="line">				<span class="keyword">if</span> (receiveData.equals(<span class="string">&quot;bye&quot;</span>)) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="comment">//关闭流</span></span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>老师TalkTeacher</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkTeacher</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">5555</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>)).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">9999</span>,<span class="string">&quot;学生&quot;</span>)).start();	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>学生TalkStudent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkStudent</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//开启两个线程</span></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">7777</span>,<span class="string">&quot;localhost&quot;</span>,<span class="number">9999</span>)).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">8888</span>,<span class="string">&quot;老师&quot;</span>)).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-URL"><a href="#8-URL" class="headerlink" title="8 URL"></a>8 URL</h3><p>统一资源定位符：定位互联网资源</p>
<p><code>协议://ip地址：端口/项目名/资源</code></p>
<p>url下载网络资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDown</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//1.下载地址</span></span><br><span class="line">		URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://127.0.0.1:8080/zhg/Confidential.txt&quot;</span>);</span><br><span class="line">		<span class="comment">//2.连接这个资源HTTP</span></span><br><span class="line">		HttpURLConnection urlConnection = (HttpURLConnection)url.openConnection();</span><br><span class="line">		InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;cfile.txt&quot;</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">while</span>((len=inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">			fos.write(buffer, <span class="number">0</span>, len); </span><br><span class="line">		&#125;</span><br><span class="line">		fos.close();</span><br><span class="line">		inputStream.close();</span><br><span class="line">		urlConnection.disconnect();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JavaSE</tag>
        <tag>网络编程</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL教程</title>
    <url>/2020/10/26/MySQL%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>数据库XX语言：DDL, DML, DQL, DCL</p>
<h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1 数据库"></a>1 数据库</h3><h4 id="1-1-连接数据库"><a href="#1-1-连接数据库" class="headerlink" title="1.1 连接数据库"></a>1.1 连接数据库</h4><p>命令行连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">&#x27;XXX&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span> = <span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host = <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>; <span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="comment">-----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="keyword">describe</span> 表名; <span class="comment">-- 显示表信息</span></span><br><span class="line"></span><br><span class="line">exit; <span class="comment">-- 退出连接</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-操作数据库"><a href="#1-2-操作数据库" class="headerlink" title="1.2 操作数据库"></a>1.2 操作数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名 <span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] 数据库名 <span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">use</span> 数据库名 <span class="comment">-- 使用/切换 如果数据库名是关键词，则加上``</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; <span class="comment">-- 查看</span></span><br></pre></td></tr></table></figure>



<p>数据类型：</p>
<blockquote>
<p>数值：</p>
</blockquote>
<ul>
<li>整型：tinyint 1B,smallint 2B, int 4B, bigint 8B</li>
<li>浮点型：float 4B, double 8B, decimal（字符串形式的浮点数，常用于金融计算）</li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li><p>char 固定大小 0~255,</p>
</li>
<li><p><strong>varchar 可变 0~65535</strong></p>
</li>
<li><p>tinytext 微型文本 2^8 - 1</p>
</li>
<li><p><strong>text 文本串 2^16-1</strong></p>
</li>
</ul>
<blockquote>
<p>时间日期</p>
</blockquote>
<ul>
<li>date YYYY- MM- DD</li>
<li>time HH: mm: ss </li>
<li>datetime YYYY- MM - DD HH: mm: ss</li>
<li>timestamp 时间戳，1970.1.1到现在的毫秒数</li>
<li>year 年份表示</li>
</ul>
<blockquote>
<p>NULL</p>
</blockquote>
<p>每个表都必须存在以下五个字段：</p>
<ul>
<li>id 主键</li>
<li>`version`乐观锁</li>
<li>is_delete 伪删除</li>
<li>gmt_create 创建时间</li>
<li>gmt_update 修改时间</li>
</ul>
<h3 id="2-表"><a href="#2-表" class="headerlink" title="2 表"></a>2 表</h3><h4 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1 创建表"></a>2.1 创建表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`student`</span>&#123;</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) [<span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;学号&#x27;</span>],</span><br><span class="line">	...</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">&#125;[<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf<span class="number">-8</span>]</span><br></pre></td></tr></table></figure>

<p>查看创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> school <span class="comment">-- 查看创建数据库语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student <span class="comment">-- 查看创建表语句</span></span><br><span class="line"><span class="keyword">DESC</span> student <span class="comment">-- 显示表结构</span></span><br></pre></td></tr></table></figure>



<p>数据表的类型</p>
<p>INNODB（默认）</p>
<p>MYISAM（早年使用）</p>
<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间大小</td>
<td>较小</td>
<td>较大，约为2倍</td>
</tr>
</tbody></table>
<p>常规使用的操作：</p>
<ul>
<li>MYISAM：节约空间，速度较快</li>
<li>INNODB：安全性高，事务的处理，多表多用户操作</li>
</ul>
<p>所有的数据库文件都存在data目录下，本质还是文件的存储</p>
<p>MySQL引擎在物理文件上的区别</p>
<ul>
<li>INNODB在数据库表中只有*.frm文件，以及上级目录下的ibdata1文件</li>
<li>MYISAM对应文件<ul>
<li>*.frm - 表结构的定义文件</li>
<li>*.MYD 数据文件（data）</li>
<li>*.MYI 索引文件（index）</li>
</ul>
</li>
</ul>
<h4 id="2-2-修改删除表"><a href="#2-2-修改删除表" class="headerlink" title="2.2 修改删除表"></a>2.2 修改删除表</h4><blockquote>
<p>修改（alter）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher <span class="keyword">RENAME</span> <span class="keyword">AS</span> teacher1 <span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="comment">-- 增加字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">11</span>) <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">CHANGE</span> age age1 <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="comment">-- 重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1</span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] teacher1</span><br></pre></td></tr></table></figure>

<h3 id="3-MySQL数据管理"><a href="#3-MySQL数据管理" class="headerlink" title="3 MySQL数据管理"></a>3 MySQL数据管理</h3><h4 id="3-1-外键"><a href="#3-1-外键" class="headerlink" title="3.1 外键"></a>3.1 外键</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>);</span><br></pre></td></tr></table></figure>

<p>以上操作都是物理外键，数据库级别的外键，不建议使用，避免数据库过多造成困扰</p>
<h4 id="3-2-DML语言"><a href="#3-2-DML语言" class="headerlink" title="3.2 DML语言"></a>3.2 DML语言</h4><p>数据库意义：数据存储，数据管理</p>
<p>添加：<code>insert into 表名[(字段1,2,3...)]values(值1,2,3...)[,(),()...]</code></p>
<p>修改：<code>update 表名 set 字段1 = 值1[,字段2 = 值2...] where 条件</code></p>
<p>删除：<code>delete from 表名 where 条件</code></p>
<p><code>truncate 表名</code>：完全清空一个数据库表，表的结构和索引约束不会变！</p>
<p>truncate 重新设置，自增列，计数器会归零，不会影响事务</p>
<p>where子句</p>
<p>=, &gt;, &lt;, &lt;=, &gt;= &lt;&gt;或者!=（不等于）, BETWEEN X AND Y （[X,Y]）</p>
<p>AND, OR</p>
<p>注意：没写条件则修改表的所有记录！</p>
<h3 id="4-DQL查询数据"><a href="#4-DQL查询数据" class="headerlink" title="4 DQL查询数据"></a>4 DQL查询数据</h3><blockquote>
<p>DQL:Data QueryLanguage 数据查询语言</p>
</blockquote>
<p><code>select 字段 [as 别名] from 表 [as 别名]</code></p>
<p>函数</p>
<p>concat(a,b)</p>
<p>去重 distinct <code>select distinct 字段 ...</code></p>
<p>可以select的表达式：文本值，列，Null，函数，计算表达式，系统变量… </p>
<h4 id="4-1-模糊查询"><a href="#4-1-模糊查询" class="headerlink" title="4.1 模糊查询"></a>4.1 模糊查询</h4><p>is null,like, in</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="comment">-- like结合 %代表0到任意个字符 _代表一个字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">from</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">where</span> StudentName <span class="keyword">like</span> <span class="string">&#x27;刘%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询1001,1002,1003号学员</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">from</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">where</span> StudentNo <span class="keyword">in</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-2-联表查询"><a href="#4-2-联表查询" class="headerlink" title="4.2 联表查询"></a>4.2 联表查询</h4><p>where 等值查询</p>
<p>join on 连接查询</p>
<p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/0c0FW4.png" alt="SQL联表查询七种类型"></p>
<p>查表思路：</p>
<ol>
<li>分析需求：分析查询的字段来自哪些表</li>
<li>确定使用哪种连接查询（7种）</li>
<li>确定交叉点（判断的条件：student.studentNo = grade.studentNo）</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询缺考的学生</span></span><br><span class="line"><span class="keyword">select</span> s.StudentNo,studentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> s.studentNo = r.studentNo</span><br><span class="line"><span class="keyword">where</span> StudentResult <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><p>核心：一张表拆成两张一样的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="string">`categoryName`</span> <span class="keyword">as</span> <span class="string">&#x27;父栏目&#x27;</span>,b.<span class="string">`categoryName`</span> <span class="keyword">as</span> <span class="string">&#x27;子栏目&#x27;</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`category`</span> <span class="keyword">as</span> a,<span class="string">`category`</span> <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> a.<span class="string">`categoryid`</span> = b.<span class="string">`pid`</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-分页和排序"><a href="#4-3-分页和排序" class="headerlink" title="4.3 分页和排序"></a>4.3 分页和排序</h4><p>limit &amp; order by</p>
<p>排序：升序 ASC 降序 DESC</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 分页：起始值，页面大小</span></span><br><span class="line">limit <span class="keyword">start</span>(<span class="number">0</span>-),<span class="keyword">size</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span> <span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span> <span class="comment">-- 第二页</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">limit</span> (N<span class="number">-1</span>)*pageSize,pageSize <span class="comment">--第N页</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4-嵌套查询"><a href="#4-4-嵌套查询" class="headerlink" title="4.4 嵌套查询"></a>4.4 嵌套查询</h4><p>select 字段 from 表</p>
<p>where(子查询)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 由里及外</span></span><br><span class="line"><span class="keyword">select</span> StudentNo,StudentName <span class="keyword">from</span> student <span class="keyword">where</span> StudentNo <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> StudentNo <span class="keyword">from</span> <span class="keyword">result</span> <span class="keyword">where</span> StudentResult&gt;<span class="number">80</span></span><br><span class="line">    <span class="keyword">and</span> SubjectNo = (</span><br><span class="line">        <span class="keyword">select</span> SubjectNo <span class="keyword">from</span> <span class="string">`subject`</span> <span class="keyword">where</span> <span class="string">`SubjectName`</span> = <span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="5-MySQL函数"><a href="#5-MySQL函数" class="headerlink" title="5 MySQL函数"></a>5 MySQL函数</h3><p>官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/sql-function-reference.html">https://dev.mysql.com/doc/refman/5.7/en/sql-function-reference.html</a></p>
<h4 id="5-1-常用函数"><a href="#5-1-常用函数" class="headerlink" title="5.1 常用函数"></a>5.1 常用函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 数学函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">abs</span>(<span class="number">-8</span>) <span class="comment">-- 8</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ceiling</span>(<span class="number">9.4</span>) <span class="comment">-- 10</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="number">9.4</span>) <span class="comment">-- 9</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rand</span>() <span class="comment">-- 0~1</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sign</span>(<span class="number">-10</span>/<span class="number">0</span>/<span class="number">10</span>) <span class="comment">-- -1,0,1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">char_length</span>(<span class="string">&#x27;xxxxx&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span>(<span class="string">&#x27;xxx&#x27;</span>,pos,<span class="keyword">length</span>,<span class="string">&#x27;yyy&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">lower</span>(<span class="string">&#x27;XXX&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">upper</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">instr</span>(<span class="string">&#x27;xyz&#x27;</span>,<span class="string">&#x27;x&#x27;</span>) <span class="comment">-- 返回子串第一次出现的索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">&#x27;abcdefg&#x27;</span>,pos,<span class="keyword">length</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">reverse</span>(<span class="string">&#x27;cba&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓周的同学,替换成邹</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(studentname,<span class="string">&#x27;周&#x27;&#x27;邹&#x27;</span>） <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> studentname <span class="keyword">like</span> <span class="string">&#x27;周%&#x27;</span></span><br><span class="line">               </span><br><span class="line"><span class="comment">-- 时间和日期函数（记住）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_date</span>()</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">curdate</span>()</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">localtime</span>()</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">system_user</span>()    </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>()</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>()</span><br></pre></td></tr></table></figure>

<h4 id="5-2-聚合函数"><a href="#5-2-聚合函数" class="headerlink" title="5.2 聚合函数"></a>5.2 聚合函数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(字段) <span class="keyword">from</span> 表 <span class="comment">-- 忽略null值，有主键，count(字段)查询效率高</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="string">`StudentResult`</span>) <span class="keyword">as</span> 总和 <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="string">`StudentResult`</span>) <span class="keyword">as</span> 平均分 <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="string">`StudentResult`</span>) <span class="keyword">as</span> 最高分 <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="string">`StudentResult`</span>) <span class="keyword">as</span> 最低分 <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分组：查询不同课程的平均分，最高分，最低分</span></span><br><span class="line"><span class="keyword">select</span> SubjectName,<span class="keyword">avg</span>(StudentResult) <span class="keyword">as</span> 平均分,<span class="keyword">max</span>(StudentResult) <span class="keyword">as</span> 最高分,<span class="keyword">min</span>(StudentResult) <span class="keyword">as</span> 最低分</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">on</span> r.<span class="string">`SubjectNo`</span> = sub.<span class="string">`SubjectNo`</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> r.SubjectNo <span class="comment">-- 分组字段</span></span><br><span class="line"><span class="keyword">having</span> 平均分&gt;<span class="number">80</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-MD5加密"><a href="#5-3-MD5加密" class="headerlink" title="5.3 MD5加密"></a>5.3 MD5加密</h4><p>不可逆</p>
<p>破解原理：暴力破解，一个个试</p>
<p>MD5(pwd)</p>
<p>将用户传递进来的密码，进行MD5加密，然后比对加密后的值</p>
<h3 id="6-事务"><a href="#6-事务" class="headerlink" title="6 事务"></a>6 事务</h3><p>将一组SQL放在一个批次中执行</p>
<p>原则：ACID（原子性，一致性，隔离性，持久性）</p>
<p><strong>原子性（Atomicity）</strong></p>
<p>要么都成功，要么都失败</p>
<p><strong>一致性（Consistency）</strong></p>
<p>事务前后的数据完整性要保证一致</p>
<p><strong>隔离性（Isolation）</strong></p>
<p>事物之间要相互隔离</p>
<p><strong>持久性（Durability）</strong></p>
<p>事务一旦提交则不可逆，被持久化到数据库中</p>
<p>隔离导致的问题：脏读（读到另一事务未提交的数据）、不可重复读（多次读取结果不同）、幻读（读取别的事务插入的数据）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- mysql默认开启事务自动提交</span></span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span> <span class="comment">-- 关闭</span></span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">1</span> <span class="comment">-- 开启（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span></span><br><span class="line"><span class="keyword">insert</span> XXX</span><br><span class="line"><span class="keyword">insert</span> yyy</span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span></span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">rollback</span></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">savepoint</span> 保存点名</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> <span class="keyword">savepoint</span> 保存点名</span><br><span class="line"><span class="keyword">release</span> <span class="keyword">savepoint</span> 保存点名</span><br></pre></td></tr></table></figure>

<h3 id="7-索引"><a href="#7-索引" class="headerlink" title="7 索引"></a>7 索引</h3><blockquote>
<p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。</p>
</blockquote>
<h4 id="7-1-索引的分类"><a href="#7-1-索引的分类" class="headerlink" title="7.1 索引的分类"></a>7.1 索引的分类</h4><ul>
<li>主键索引（primary key）</li>
<li>唯一索引（unique key）</li>
<li>常规索引（key/index）</li>
<li>全文索引（fulltext）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1.在创建表的时候给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2.创建完毕后，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有的索引信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">index</span> <span class="keyword">from</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个全文索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 数据库.表名 <span class="keyword">add</span> fulltext <span class="keyword">index</span> 索引名(字段名)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- explain分析sql执行的状况</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="comment">--非全文索引</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">match</span>(studentName) against(<span class="string">&#x27;刘&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7-2-测试索引"><a href="#7-2-测试索引" class="headerlink" title="7.2 测试索引"></a>7.2 测试索引</h4><p> 插入100万条数据测试索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  插入100万条数据</span></span><br><span class="line">delimiter $$ <span class="comment">-- 写函数前必须写，标志</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> mock_data()</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1000000</span>;</span><br><span class="line">	<span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	while i&lt;num do</span><br><span class="line">		<span class="comment">-- 插入语句</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> app_user(<span class="string">`name`</span>,<span class="string">`email`</span>,<span class="string">`phone`</span>,<span class="string">`gender`</span>,<span class="string">`password`</span>,<span class="string">`age`</span>) <span class="keyword">values</span>(<span class="keyword">concat</span>(<span class="string">&#x27;用户&#x27;</span>,i),<span class="string">&#x27;178343244@qq.com&#x27;</span>,<span class="keyword">concat</span>(<span class="string">&#x27;18&#x27;</span>,<span class="keyword">floor</span>(<span class="keyword">rand</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>))+<span class="number">100000000</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>),<span class="keyword">uuid</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">100</span>));</span><br><span class="line">		<span class="keyword">set</span> i = i+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">while</span>;	</span><br><span class="line">	return i;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">select</span> mock_data();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> app_user <span class="keyword">where</span> <span class="string">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 0.0993 sec</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> app_user <span class="keyword">where</span> <span class="string">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 查询99万条数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建普通索引</span></span><br><span class="line"><span class="comment">-- create index 索引名 on 表(字段)</span></span><br><span class="line"><span class="comment">-- 索引名：id_表名_字段名</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> id_app_user_name <span class="keyword">on</span> app_user(<span class="string">`name`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> app_user <span class="keyword">where</span> <span class="string">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 0.001 sec</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> app_user <span class="keyword">where</span> <span class="string">`name`</span> = <span class="string">&#x27;用户9999&#x27;</span>; <span class="comment">-- 查询1条数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结：索引在小数据量的时候用处不大，但在大数据的时候，区别十分明显</p>
<h4 id="7-3-索引原则"><a href="#7-3-索引原则" class="headerlink" title="7.3 索引原则"></a>7.3 索引原则</h4><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加在经常查询的字段上</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash类型的索引</p>
<p>Btree：InnoDB默认</p>
<p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
<h3 id="8-权限管理和备份"><a href="#8-权限管理和备份" class="headerlink" title="8 权限管理和备份"></a>8 权限管理和备份</h3><h4 id="8-1-权限管理"><a href="#8-1-权限管理" class="headerlink" title="8.1 权限管理"></a>8.1 权限管理</h4><p>SQL命令操作：本质是对用户表mysql.user进行改动</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> xxx <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="comment">-- 修改密码</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> [<span class="keyword">for</span> xxx] = <span class="keyword">password</span>(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment">-- 重命名</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> xxx <span class="keyword">to</span> yyy</span><br><span class="line"><span class="comment">-- 用户授权 库.表</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> xxx <span class="comment">-- all privileges 除授权权限</span></span><br><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> xxx</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> root@localhost</span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">from</span> xxx</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> xxx</span><br></pre></td></tr></table></figure>

<h4 id="8-2-MySQL备份"><a href="#8-2-MySQL备份" class="headerlink" title="8.2 MySQL备份"></a>8.2 MySQL备份</h4><p>目的：保证数据不丢失，数据转移</p>
<p>方式：</p>
<ul>
<li>直接复制物理文件</li>
<li>在Navicat这种可视化工具中手动导出</li>
<li>使用命令行导出 mysqldump</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="comment"># 登录的情况下，切换到指定的数据库</span></span><br><span class="line"><span class="comment"># source 备份文件</span></span><br><span class="line"><span class="built_in">source</span> d:/a.sql</span><br><span class="line"></span><br><span class="line">mysql -u用户名 -p密码 库名&lt; 备份文件</span><br></pre></td></tr></table></figure>

<h3 id="9-规范数据库设计"><a href="#9-规范数据库设计" class="headerlink" title="9 规范数据库设计"></a>9 规范数据库设计</h3><p>数据库设计：分析需求→概要设计（E-R图）</p>
<p>三大范式：</p>
<ul>
<li><p>第一范式（1NF）：要求数据库表的每一列都是<strong>不可分割</strong>的原子数据项。</p>
<p>1NF保证每一列不可再分</p>
</li>
<li><p>第二范式（2NF）：满足1NF的前提下，非码属性必须<strong>完全依赖</strong>于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</p>
<p>2NF保证每张表只描述一件事物</p>
</li>
<li><p>第三范式（3NF）：满足2NF的前提下，任何非主属性不依赖于其它非主属性（在2NF基础上<strong>消除传递依赖</strong>）</p>
<p>3NF保证表中每一列数据都与主键直接相关</p>
</li>
</ul>
<p>规范性和性能的问题：</p>
<p>关联查询的表不得超过三张</p>
<ul>
<li>考虑商业化的需求和目标（成本，用户体验）数据库的性能更加重要</li>
<li>在规范性能的问题的时候，需要适当考虑规范性</li>
<li>故意给某些表增加一些冗余的字段。（多表查询→单表查询）</li>
<li>故意增加一些计算列（大数据量查询→小数据量查询）</li>
</ul>
<h3 id="10-JDBC"><a href="#10-JDBC" class="headerlink" title="10 JDBC"></a>10 JDBC</h3><p>Java操作数据库</p>
<p>程序通过数据库驱动操作数据库</p>
<p>需要导入一个数据库驱动包：mysql-connector-java-X.X.XX.jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCFirstDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>); <span class="comment">// 固定写法，自动加载DriverManager.registerDriver(new com.mysql.jdbc,Driver());</span></span><br><span class="line">        <span class="comment">// 2. 用户信息和url</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC&amp;useSSL=true&quot;</span>; <span class="comment">// 协议(jdbc:mysql)://主机地址:端口号/数据库名?参数</span></span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;1031&quot;</span>;</span><br><span class="line">        <span class="comment">// 3. 连接成功，数据库对象Connection</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">// 4. Statement执行SQL对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">// 5.查看返回结果</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;pwd=&quot;</span>+resultSet.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 释放连接，耗资源，用完关掉</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java使用JDBC连接数据库步骤：</p>
<ol>
<li>加载驱动</li>
<li>连接数据库DriverManager</li>
<li>获取执行sql的对象Statement</li>
<li>获取返回的结果集</li>
<li>释放连接</li>
</ol>
<p>Statement &amp; ResultSet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection connection = DriverManager.getConnection(url,username,password);</span><br><span class="line">Statement statement = connection.createStatement();</span><br><span class="line">String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql); <span class="comment">// 查询操作返回ResultSet</span></span><br><span class="line">statement.execute(); <span class="comment">// 执行任何SQL</span></span><br><span class="line">statement.executeUpdate(); <span class="comment">// 更新、插入，删除，返回一个受影响的行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ResultSet</span></span><br><span class="line">resultSet.getObject(<span class="string">&quot;id&quot;</span>) <span class="comment">// 不知道返回类型</span></span><br><span class="line">resultSet.getString(<span class="string">&quot;id&quot;</span>) <span class="comment">// 知道返回类型</span></span><br><span class="line"><span class="comment">// 遍历指针（光标）</span></span><br><span class="line">resultSet.next() <span class="comment">// 移动到下一行</span></span><br><span class="line">resultSet.beforeFirst() <span class="comment">// 移动到最前</span></span><br><span class="line">resultSet.afterLast() <span class="comment">// 移动到最后</span></span><br><span class="line">resultSet.previous()  <span class="comment">// 移动到前一行</span></span><br><span class="line">resultSet.absolute(row) <span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure>

<h4 id="10-1-封装JDBC（JDBCUtils-java）"><a href="#10-1-封装JDBC（JDBCUtils-java）" class="headerlink" title="10.1 封装JDBC（JDBCUtils.java）"></a>10.1 封装JDBC（JDBCUtils.java）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream in = JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1.驱动只要加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,username,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用JDBC封装类来操作数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhg.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(4,&#x27;zhg&#x27;,&#x27;123456&#x27;,&#x27;zhomgun@qq.com&#x27;,&#x27;2020-01-01&#x27;)&quot;</span>; <span class="comment">// 删改只需改sql语句</span></span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhg.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;select * from users&quot;</span>; <span class="comment">// 删改只需改sql语句</span></span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;pwd=&quot;</span>+resultSet.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;birthday=&quot;</span>+resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-2-SQL注入"><a href="#10-2-SQL注入" class="headerlink" title="10.2 SQL注入"></a>10.2 SQL注入</h4><blockquote>
<p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhg.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLInjection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        login(<span class="string">&quot;zhg&quot;</span>,<span class="string">&quot;123456&quot;</span>); <span class="comment">// 正常登录</span></span><br><span class="line">        login(<span class="string">&quot;&#x27;or&#x27;1=1&quot;</span>,<span class="string">&quot;&#x27;or&#x27;1=1&quot;</span>); <span class="comment">//SQL注入：用or拼接SQL语句...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 登录业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            String sql = <span class="string">&quot;select * from users where `NAME` =&#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and `PASSWORD` = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>; <span class="comment">// 删改只需改sql语句</span></span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span>+resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;name=&quot;</span>+resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;pwd=&quot;</span>+resultSet.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;email=&quot;</span>+resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;birthday=&quot;</span>+resultSet.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-3-PreparedStatement对象"><a href="#10-3-PreparedStatement对象" class="headerlink" title="10.3 PreparedStatement对象"></a>10.3 PreparedStatement对象</h4><p>PreparedStatement可以防止SQL注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhg.lesson02.utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//使用?占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)&quot;</span>; <span class="comment">// 删改只需改sql语句</span></span><br><span class="line">            statement = connection.prepareStatement(sql); <span class="comment">// 预编译的SQL，先写SQL，然后不执行</span></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            statement.setInt(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">            statement.setString(<span class="number">2</span>,<span class="string">&quot;hugh&quot;</span>);</span><br><span class="line">            statement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            statement.setString(<span class="number">4</span>,<span class="string">&quot;24245525@qq.com&quot;</span>);</span><br><span class="line">            <span class="comment">// 注意点：sql.Date    数据库   new java.sql.Date(时间戳)</span></span><br><span class="line">            <span class="comment">//        util.Date   Java    new Date().getTime() 获得时间戳</span></span><br><span class="line">            statement.setDate(<span class="number">5</span>,<span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> Date().getTime()));</span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(connection,statement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PreparedStatement可以防止SQL注入的本质：把传递进来的参数当作字符，假如存在转义字符，就直接转义</p>
<h4 id="10-4-数据库连接池"><a href="#10-4-数据库连接池" class="headerlink" title="10.4 数据库连接池"></a>10.4 数据库连接池</h4><p>数据库连接→执行→释放，非常浪费系统资源</p>
<p>池化技术：准备一些预先的资源，过来就连接预先准备好的</p>
<p>编写连接池，实现接口DataSource</p>
<p>开源数据源实现</p>
<p>DBCP</p>
<p>C3P0</p>
<p>Druid：阿里</p>
<p>使用这些数据库连接池之后，我们在项目开发中不需要编写数据库的代码了！</p>
<p>DBCP，需要jar包：commons-dbcp-1.4, commons-pool-1.6</p>
<p>C3P0，需要jar包：c3p0-0.9.5.5, mcharge-commons-java-0.2.19</p>
<p>无论使用什么数据源，本质还是一样的，DataSource接口不会变，方法就不会变</p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>注解和反射</title>
    <url>/2020/10/26/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h3 id="1-注解简介"><a href="#1-注解简介" class="headerlink" title="1 注解简介"></a>1 注解简介</h3><p>注解（Annotation）是从JDK5.0开始引入的新技术</p>
<p>作用：</p>
<ul>
<li>对程序作出解释（非必须，检查和约束）</li>
<li>被其他程序读取（编译器）</li>
</ul>
<p>格式：@注解名（有的还可以添加参数值）</p>
<p>Annotation可以附加在package, class, method, field 等上面，相当于给他们添加了额外的辅助信息，可以通过<strong>反射机制</strong>编程实现对这些元数据的访问</p>
<h4 id="1-1-内置注解"><a href="#1-1-内置注解" class="headerlink" title="1.1 内置注解"></a>1.1 内置注解</h4><p>@Override：重写父类方法</p>
<p>@Deprecated：不推荐使用</p>
<p>@SuppressWarnings(“all”)：抑制警告</p>
<h4 id="1-2-元注解"><a href="#1-2-元注解" class="headerlink" title="1.2 元注解"></a>1.2 元注解</h4><p>作用：注解其他注解，为其他annotation提供说明</p>
<p>Java定义了4个标准的meta-annotation类型：@Target, @Retention, @Document, @Inherited</p>
<ul>
<li><p><strong>@Target</strong>：描述注解的使用范围</p>
</li>
<li><p><strong>@Retention</strong>：描述注解的生命周期（SOURCE&lt;CLASS&lt;<strong>RUNTIME</strong>）</p>
</li>
<li><p>@Documented：说明该注解被包含在javadoc中</p>
</li>
<li><p>@inherited：说明子类可以继承父类中的该注释</p>
</li>
</ul>
<h4 id="1-3-自定义注解"><a href="#1-3-自定义注解" class="headerlink" title="1.3 自定义注解"></a>1.3 自定义注解</h4><p>格式：public @ interface 注解名 {定义内容}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">	<span class="comment">//注解可以显式赋值，如果没有默认值，则必须赋值</span></span><br><span class="line">	<span class="meta">@MyAnnotation(name = &quot;XXX&quot;,schools = &#123;&quot;门头沟大学&quot;,&quot;家里蹲大学&quot;&#125;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target 描述注解使用范围</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment">//Retention 描述注解生效时间</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//Documented 表示将注解生成在javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//Inherited 表示子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">	<span class="comment">//注解的参数：参数类型+参数名()</span></span><br><span class="line">	<span class="comment">//假如只有一参数，建议命名为value</span></span><br><span class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">	String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-反射机制"><a href="#2-反射机制" class="headerlink" title="2 反射机制"></a>2 反射机制</h3><p>静态语言VS动态语言</p>
<ul>
<li><p>动态语言：运行时代码可以根据某些条件改变自身结构（C#, JavaScript, Python…）</p>
</li>
<li><p>静态语言：运行时结构不可变（Java, C, C++…）</p>
</li>
</ul>
<p>Java不是动态语言，但Java可以利用<strong>反射机制</strong>获得类似动态语言的特性</p>
<p>反射机制（Reflection）允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</p>
<p>功能：</p>
<ul>
<li>运行时进行与类（对象）相关的操作</li>
<li>运行时处理注解</li>
<li>生成动态代理（AOP）</li>
</ul>
<p>优点：实现动态创建对象和编译，体现出很大的灵活性</p>
<p>缺点：对性能有影响。使用反射基本上是一种解释操作，这类操作总是慢于直接执行相同的操作</p>
<p>主要API：java.lang.Class…</p>
<h4 id="2-1-Class类"><a href="#2-1-Class类" class="headerlink" title="2.1 Class类"></a>2.1 Class类</h4><p>Object类中定义了getClass()方法，被所有子类继承</p>
<p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/image-20200918155009181.png" alt="Class类方法"></p>
<p>获取Class类的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Student();</span><br><span class="line">		System.out.println(<span class="string">&quot;这个人是：&quot;</span>+person.name);</span><br><span class="line">		<span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">		<span class="comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">		<span class="comment">//获取类的Class对象</span></span><br><span class="line">		<span class="comment">//方式一：通过对象获得</span></span><br><span class="line">		Class c1 = person.getClass();</span><br><span class="line">		System.out.println(c1.hashCode());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//方式二：通过Class.forName获得</span></span><br><span class="line">		Class c2 = Class.forName(<span class="string">&quot;com.zhg.reflection.Student&quot;</span>);</span><br><span class="line">		System.out.println(c2.hashCode());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//方式三：通过类名.class获得</span></span><br><span class="line">		Class c3 = Student.class;</span><br><span class="line">		System.out.println(c3.hashCode());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//方式四：基本内置类型的包装类都有一个TYPE属性</span></span><br><span class="line">		Class c4 = Integer.TYPE;</span><br><span class="line">		System.out.println(c4);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获得父类类型</span></span><br><span class="line">		Class c5 = c1.getSuperclass();</span><br><span class="line">		System.out.println(c5);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哪些类型可以有Class对象？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="comment">//所有类型的Class对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Class c1 = Object.class; <span class="comment">//类</span></span><br><span class="line">		Class c2 = Comparable.class; <span class="comment">//接口</span></span><br><span class="line">		Class c3 = String[].class; <span class="comment">//一维数组</span></span><br><span class="line">		Class c4 = <span class="keyword">int</span>[][].class; <span class="comment">//二维数组</span></span><br><span class="line">		Class c5 = Override.class; <span class="comment">//注解</span></span><br><span class="line">		Class c6 = ElementType.class; <span class="comment">//枚举</span></span><br><span class="line">		Class c7 = Integer.class; <span class="comment">//基本数据类型包装类</span></span><br><span class="line">		Class c8 = <span class="keyword">void</span>.class; <span class="comment">//void</span></span><br><span class="line">		Class c9 = Class.class; <span class="comment">//Class</span></span><br><span class="line">		System.out.println(c1); <span class="comment">//class java.lang.Object</span></span><br><span class="line">		System.out.println(c2); <span class="comment">//interface java.lang.Comparable</span></span><br><span class="line">		System.out.println(c3); <span class="comment">//class [Ljava.lang.String;</span></span><br><span class="line">		System.out.println(c4); <span class="comment">//class [[I</span></span><br><span class="line">		System.out.println(c5); <span class="comment">//interface java.lang.Override</span></span><br><span class="line">		System.out.println(c6); <span class="comment">//class java.lang.annotation.ElementType</span></span><br><span class="line">		System.out.println(c7); <span class="comment">//class java.lang.Integer</span></span><br><span class="line">		System.out.println(c8); <span class="comment">//void</span></span><br><span class="line">		System.out.println(c9); <span class="comment">//class java.lang.Class</span></span><br><span class="line">		<span class="comment">//只要元素类型与维度一样，就是同一Class</span></span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">		System.out.println(a.getClass().hashCode());</span><br><span class="line">		System.out.println(b.getClass().hashCode());</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-内存分析"><a href="#2-2-内存分析" class="headerlink" title="2.2 内存分析"></a>2.2 内存分析</h4><p>Java内存：堆（方法区），栈</p>
<p>堆：存放new的对象和数组，可以被所有线程共享</p>
<p>方法区：特殊的堆，存放所有class和static变量</p>
<p>栈：存放基本变量类型，引用类型的变量</p>
<h5 id="2-2-1-类的加载过程"><a href="#2-2-1-类的加载过程" class="headerlink" title="2.2.1 类的加载过程"></a>2.2.1 类的加载过程</h5><p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/image-20200919105811687.png" alt="类加载过程"></p>
<p>加载（Load）：将class文件字节码内容加载到内存中，并将这些<u>静态数据</u>转换成<strong>方法区</strong>的<u>运行时数据结构</u>，然后生成一个代表这个类的java.lang.Class对象</p>
<p>链接（Link）：将Java类的<u>二进制代码</u>合并到<strong>JVM的运行状态（JRE）</strong>中的过程</p>
<ul>
<li>验证：确保加载类信息符合JVM规范，没有安全问题</li>
<li>准备：为类变量（static）分配内存并设置默认初始值</li>
<li>解析：虚拟机常量池的符号（常量名）引用替换为直接引用（地址）的过程</li>
</ul>
<p>初始化（Initialize）：</p>
<ul>
<li>执行类构造器&lt;clinit&gt;()方法的过程（类构造器是构造类信息的）</li>
<li>先触发父类的初始化</li>
<li>保证&lt;clinit&gt;()方法在多线程环境中被正确加锁和同步</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		A a = <span class="keyword">new</span> A();</span><br><span class="line">		System.out.println(A.m);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 1.加载到内存，会产生一个类对应的Class对象</span></span><br><span class="line"><span class="comment">		 2.链接，链接结束后 m = 0</span></span><br><span class="line"><span class="comment">		 3.初始化</span></span><br><span class="line"><span class="comment">		 &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">		 	System.out.println(&quot;A类静态代码块初始化&quot;);</span></span><br><span class="line"><span class="comment">			m = 300;</span></span><br><span class="line"><span class="comment">			m = 100;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		m = 100;</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;A类静态代码块初始化&quot;</span>);</span><br><span class="line">		m = <span class="number">300</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;A类的无参构造器初始化&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-2-类的初始化"><a href="#2-2-2-类的初始化" class="headerlink" title="2.2.2 类的初始化"></a>2.2.2 类的初始化</h5><p>什么时候会发生类的初始化？</p>
<ul>
<li>类的主动引用（一定会发生类的初始化）<ul>
<li>虚拟机启动时先初始化main方法所在的类</li>
<li>new一个类的对象</li>
<li>调用类的静态成员和静态方法（除了final常量）</li>
<li>对类进行<strong>反射</strong>调用</li>
<li>当初始化一个类时，先初始化其父类</li>
</ul>
</li>
<li>类的被动引用（不会发生类的初始化）<ul>
<li>当访问<u>静态域</u>时，只有真正声明这个于的类才会被初始化</li>
<li>通过数组定义<u>类引用</u>，不会触发此类的初始化</li>
<li>引用<u>常量</u>不会触发此类的初始化（常量在链接阶段就存入调用类的常量池了）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类什么时候会初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;main类被加载&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">		<span class="comment">//1.主动引用</span></span><br><span class="line">		<span class="comment">//Son son = new Son();</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//反射也会产生主动引用</span></span><br><span class="line">		<span class="comment">//Class.forName(&quot;com.zhg.reflection.Son&quot;);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//不会产生类的引用的方法</span></span><br><span class="line">		<span class="comment">//System.out.println(Son.b);</span></span><br><span class="line">		<span class="comment">//Son[] array = new Son[5];</span></span><br><span class="line">		System.out.println(Son.M);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">		m = <span class="number">300</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-3-类加载器"><a href="#2-2-3-类加载器" class="headerlink" title="2.2.3 类加载器"></a>2.2.3 类加载器</h5><p>作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成这个类的Class对象，作为方法区中类数据的访问入口</p>
<p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/image-20200919160057995.png" alt="类加载过程"></p>
<p>类缓存：类加载器加载类时，先按要求查找类，如果某个类被加载到类加载器中，它将维持加载（缓存）一段时间。</p>
<p>类加载器的类型：</p>
<ul>
<li>引导类加载器（负责Java核心库）</li>
<li>扩展类加载器</li>
<li>系统类加载器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">		<span class="comment">//获取系统类的加载器</span></span><br><span class="line">		ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">		System.out.println(systemClassLoader);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取系统类加载器的父类加载器--&gt;扩展类加载器</span></span><br><span class="line">		ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">		System.out.println(parent);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取扩展类加载器的父类加载器--&gt;根加载器（C/C++）</span></span><br><span class="line">		ClassLoader parent1 = parent.getParent();</span><br><span class="line">		System.out.println(parent1);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//测试当前类是哪个加载器加载的（系统类加载器）</span></span><br><span class="line">		ClassLoader classLoader = Class.forName(<span class="string">&quot;com.zhg.reflection.Test05&quot;</span>).getClassLoader();</span><br><span class="line">		System.out.println(classLoader);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//测试JDK内置的类是谁加载的（根加载器）</span></span><br><span class="line">		classLoader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">		System.out.println(classLoader);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//如何获得系统类加载器可以加载的路径</span></span><br><span class="line">		System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//双亲委派机制</span></span><br><span class="line">			<span class="comment">//java.lang.String--&gt;多重检测，保证安全性</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-4-获取类的结构"><a href="#2-2-4-获取类的结构" class="headerlink" title="2.2.4 获取类的结构"></a>2.2.4 获取类的结构</h5><p>通过反射获取运行时类的完整结构</p>
<p>Field, Method, Constructor, Superclass, Interface, Annotation…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, SecurityException, NoSuchMethodException </span>&#123;</span><br><span class="line">		Class c1 = Class.forName(<span class="string">&quot;com.zhg.reflection.Person&quot;</span>);</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">		c1 = person.getClass();</span><br><span class="line">		System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">		<span class="comment">//获得类的名字</span></span><br><span class="line">		System.out.println(c1.getName()); <span class="comment">//获得包名 + 类名</span></span><br><span class="line">		System.out.println(c1.getSimpleName()); <span class="comment">//获得类名	</span></span><br><span class="line">		<span class="comment">//获得类的属性</span></span><br><span class="line">		Field[] fields = c1.getFields(); <span class="comment">//只能找到public属性</span></span><br><span class="line">		<span class="keyword">for</span>(Field field:fields) &#123;</span><br><span class="line">			System.out.println(field);</span><br><span class="line">		&#125;</span><br><span class="line">		fields = c1.getDeclaredFields(); <span class="comment">//找到全部的属性</span></span><br><span class="line">		<span class="keyword">for</span>(Field field:fields) &#123;</span><br><span class="line">			System.out.println(field);</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="comment">//获取指定属性的值</span></span><br><span class="line">		Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">		<span class="comment">//获得类的方法</span></span><br><span class="line">		Method[] methods = c1.getMethods(); <span class="comment">//获得本类及父类的所有public方法</span></span><br><span class="line">		<span class="keyword">for</span>(Method method:methods) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;正常的：&quot;</span>+method);</span><br><span class="line">		&#125;</span><br><span class="line">		methods = c1.getDeclaredMethods(); <span class="comment">//获得本类的所有方法（包括private方法）</span></span><br><span class="line">		<span class="keyword">for</span>(Method method:methods) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;getDeclaredMethods：&quot;</span>+method);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//获得指定方法</span></span><br><span class="line">		Method getName = c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">		Method setName = c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">		System.out.println(getName);</span><br><span class="line">		System.out.println(setName);</span><br><span class="line">		System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">		<span class="comment">//获得指定的构造器</span></span><br><span class="line">		Constructor[] constructors = c1.getConstructors(); <span class="comment">//获得public构造器</span></span><br><span class="line">		<span class="keyword">for</span>(Constructor constructor:constructors) &#123;</span><br><span class="line">			System.out.println(constructor);</span><br><span class="line">		&#125;</span><br><span class="line">		constructors = c1.getDeclaredConstructors(); <span class="comment">//获得全部构造器</span></span><br><span class="line">		<span class="keyword">for</span>(Constructor constructor:constructors) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;#&quot;</span>+constructor);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//获得指定的构造器</span></span><br><span class="line">		Constructor declaredConstructor = c1.getDeclaredConstructor(String.class);</span><br><span class="line">		System.out.println(<span class="string">&quot;指定：&quot;</span>+declaredConstructor);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实际应用"><a href="#2-3-实际应用" class="headerlink" title="2.3 实际应用"></a>2.3 实际应用</h4><h5 id="2-3-1-动态创建对象"><a href="#2-3-1-动态创建对象" class="headerlink" title="2.3.1 动态创建对象"></a>2.3.1 动态创建对象</h5><p>动态创建类的对象：调用Class对象的newInstance()方法</p>
<ol>
<li>类必须有一个<strong>无参构造器</strong></li>
<li>类的构造器的访问权限需要足够</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射动态的创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">		<span class="comment">//构造Class对象</span></span><br><span class="line">		Class c1 = Class.forName(<span class="string">&quot;com.zhg.reflection.Person&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//构造一个对象</span></span><br><span class="line">		Person person = (Person) c1.newInstance();  <span class="comment">//本质是调用了类的无参构造器</span></span><br><span class="line">		System.out.println(person);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//通过构造器创建对象</span></span><br><span class="line">		Constructor constructor = c1.getDeclaredConstructor(String.class);</span><br><span class="line">		Person person2 = (Person)constructor.newInstance(<span class="string">&quot;XX&quot;</span>);</span><br><span class="line">		System.out.println(person2);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//通过反射调用普通方法</span></span><br><span class="line">		Person person3 = (Person) c1.newInstance();</span><br><span class="line">		Method setName = c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">		<span class="comment">//invoke(对象，方法参数)</span></span><br><span class="line">		setName.invoke(person3, <span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">		System.out.println(person3.name);</span><br><span class="line">		System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">		<span class="comment">//通过反射操作属性</span></span><br><span class="line">		Person person4 = (Person) c1.newInstance();</span><br><span class="line">		Field name = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		<span class="comment">//不能直接操作私有属性，需要关闭程序的安全检测，属性或者方法的setAccessible(true)</span></span><br><span class="line">		name.setAccessible(<span class="keyword">true</span>); <span class="comment">//</span></span><br><span class="line">		name.set(person4, <span class="string">&quot;XXXX&quot;</span>);</span><br><span class="line">		System.out.println(person4.getName());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>setAccessible参数值为true则指示反射的对象在使用时取消Java语言访问检查→提高了反射的效率；使得原本无法访问的私有成员也可以访问</p>
<p>性能分析（调用对象的方法）：普通方式 VS 反射方式 VS 关闭检测后反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析性能问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line">	<span class="comment">//普通方式调用</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">			person.getName();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;普通方式执行&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//反射方式调用</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">		Class c1 = person.getClass();</span><br><span class="line">		</span><br><span class="line">		Method getName = c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">			getName.invoke(person, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;反射方式执行&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//反射方式调用 关闭检测</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">		Class c1 = person.getClass();</span><br><span class="line">		</span><br><span class="line">		Method getName = c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">		getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">			getName.invoke(person, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;关闭检测后反射方式执行&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">		test01();</span><br><span class="line">		test02();</span><br><span class="line">		test03();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-获取泛型信息"><a href="#2-3-2-获取泛型信息" class="headerlink" title="2.3.2 获取泛型信息"></a>2.3.2 获取泛型信息</h5><p>Java采用泛型擦除机制来引入泛型，Java中的泛型仅仅是给编译器javac使用的，一旦编译完成，所有和泛型有关的类型全部擦除</p>
<p>通过反射操作类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(Map&lt;String,Person&gt; map,List&lt;Person&gt; list)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Map&lt;String,Person&gt;test02()&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">		Method method = Test09.class.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class,List.class);</span><br><span class="line">		Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">		<span class="keyword">for</span>(Type genericParameterType:genericParameterTypes) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;#&quot;</span>+genericParameterType);</span><br><span class="line">			<span class="keyword">if</span>(genericParameterType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">				Type[] actualTypeArguments = ((ParameterizedType)genericParameterType).getActualTypeArguments();</span><br><span class="line">				<span class="keyword">for</span>(Type actualTypeArgument:actualTypeArguments) &#123;</span><br><span class="line">					System.out.println(actualTypeArgument);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		method = Test09.class.getMethod(<span class="string">&quot;test02&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">		Type genericReturnType = method.getGenericReturnType();</span><br><span class="line">		<span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">			Type[] actualTypeArguments = ((ParameterizedType)genericReturnType).getActualTypeArguments();</span><br><span class="line">			<span class="keyword">for</span>(Type actualTypeArgument:actualTypeArguments) &#123;</span><br><span class="line">				System.out.println(actualTypeArgument);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-获取注解信息"><a href="#2-3-3-获取注解信息" class="headerlink" title="2.3.3 获取注解信息"></a>2.3.3 获取注解信息</h5><p>ORM(Object Relationship Mapping)：对象关系映射</p>
<ul>
<li>类和表结构对应</li>
<li>属性和字段对应</li>
<li>对象和记录对应</li>
</ul>
<p>利用注解和反射完成类和表结构的映射关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test10</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, SecurityException </span>&#123;</span><br><span class="line">		Class c1 = Class.forName(<span class="string">&quot;com.zhg.reflection.StudentX&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//通过反射获得注解</span></span><br><span class="line">		Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">		<span class="keyword">for</span>(Annotation annotation:annotations) &#123;</span><br><span class="line">			System.out.println(annotation);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取注解的value值</span></span><br><span class="line">		TableX table = (TableX)c1.getAnnotation(TableX.class);</span><br><span class="line">		String value = table.value();</span><br><span class="line">		System.out.println(value);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取类指定的注解</span></span><br><span class="line">		Field f = c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		FieldX annotation = f.getAnnotation(FieldX.class);</span><br><span class="line">		System.out.println(annotation.columnName());</span><br><span class="line">		System.out.println(annotation.type());</span><br><span class="line">		System.out.println(annotation.length());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@TableX(&quot;db_student&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentX</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@FieldX(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="meta">@FieldX(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="meta">@FieldX(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StudentX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StudentX</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> TableX&#123;</span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> FieldX&#123;</span><br><span class="line">	<span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JavaSE</tag>
        <tag>注解</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程详解</title>
    <url>/2020/10/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="1-1-线程简介"><a href="#1-1-线程简介" class="headerlink" title="1.1 线程简介"></a>1.1 线程简介</h3><p>多任务→多线程</p>
<p>进程 VS 线程</p>
<ul>
<li>程序是指令和数据的有序集合，是一个静态的概念。</li>
<li>进程是程序的一次执行过程,是一个动态的概念。</li>
<li>进程中至少有一个线程，线程是CPU调度和执行的基本单位。</li>
</ul>
<h3 id="1-2-线程创建"><a href="#1-2-线程创建" class="headerlink" title="1.2 线程创建"></a>1.2 线程创建</h3><p>三种创建方式：</p>
<ol>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
<li>实现Callable接口（了解）</li>
</ol>
<h4 id="1-2-1-继承Thread类"><a href="#1-2-1-继承Thread类" class="headerlink" title="1.2.1 继承Thread类"></a>1.2.1 继承Thread类</h4><p>创建线程方式一：继承Thread类→重写run()方法→调用start()启动线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，线程开启不一定立即执行，由CPU调度执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// run方法线程体</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;我在看代码—————&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//main线程，主线程</span></span><br><span class="line">		TestThread1 testThread1 = <span class="keyword">new</span> TestThread1();</span><br><span class="line">		<span class="comment">//调用start()方法开启线程，交替执行</span></span><br><span class="line">		testThread1.start();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;我在学习多线程—————&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现多线程同步下载图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String url,name; <span class="comment">//网络图片地址，保存的文件名</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestThread2</span><span class="params">(String url,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.url = url;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//下载图片线程执行体</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">		webDownloader.downloader(url, name);</span><br><span class="line">		System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TestThread2 t1 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">		TestThread2 t2 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">		TestThread2 t3 = <span class="keyword">new</span> TestThread2(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">	<span class="comment">//下载方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-实现Runnable接口"><a href="#1-2-2-实现Runnable接口" class="headerlink" title="1.2.2 实现Runnable接口"></a>1.2.2 实现Runnable接口</h4><p>创建线程方式二：实现Runnable接口→重写run()方法→调用start()启动线程（需要Runnable接口实现类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// run方法线程体</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;我在看代码—————&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建runnable接口的实现类对象</span></span><br><span class="line">		TestThread3 testThread3 = <span class="keyword">new</span> TestThread3();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建线程对象，通过线程对象来开启线程，代理</span></span><br><span class="line"><span class="comment">//		Thread thread = new Thread(testThread3);</span></span><br><span class="line"><span class="comment">//		thread.start();</span></span><br><span class="line">		<span class="keyword">new</span> Thread(testThread3).start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>;i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;我在学习多线程—————&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="comment">//练习Thread，实现多线程同步下载图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2n</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String url,name; <span class="comment">//网络图片地址，保存的文件名</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestThread2n</span><span class="params">(String url,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.url = url;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//下载图片线程执行体</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		WebDownloader1 webDownloader = <span class="keyword">new</span> WebDownloader1();</span><br><span class="line">		webDownloader.downloader(url, name);</span><br><span class="line">		System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TestThread2n t1 = <span class="keyword">new</span> TestThread2n(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">		TestThread2n t2 = <span class="keyword">new</span> TestThread2n(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">		TestThread2n t3 = <span class="keyword">new</span> TestThread2n(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(t1).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(t2).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(t3).start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader1</span></span>&#123;</span><br><span class="line">	<span class="comment">//下载方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>继承Thread类<ul>
<li>子类继承Thread类具备多线程能力</li>
<li>启动线程：子类对象.start()</li>
<li><strong>不建议使用：避免OOP单继承局限性</strong></li>
</ul>
</li>
<li>实现Runnable接口<ul>
<li>实现接口Runnable具有多线程能力</li>
<li>启动线程：传入目标对象+Thread对象.start()</li>
<li><strong>推荐使用：避免单继承局限性，灵活方便，方便同一对象被多个线程使用</strong></li>
</ul>
</li>
</ul>
<p>多个线程同时操作一个对象，买火车票的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//问题：多个线程操作同一个资源，线程不安全，数据紊乱</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="comment">//票数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ticketNum&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">10</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了第&quot;</span>+ticketNum--+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TestThread4 ticket = <span class="keyword">new</span> TestThread4();</span><br><span class="line">		<span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ticket,<span class="string">&quot;老师&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ticket,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>案例：龟兔赛跑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="comment">//胜利者</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String winner; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Race race = <span class="keyword">new</span> Race();</span><br><span class="line">		<span class="keyword">new</span> Thread(race,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(race,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>;i++) &#123;</span><br><span class="line">			<span class="comment">//模拟兔子休息</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="string">&quot;兔子&quot;</span>.equals(Thread.currentThread().getName() )&amp;&amp; i%<span class="number">10</span>==<span class="number">5</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">56</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(<span class="string">&quot;乌龟&quot;</span>.equals(Thread.currentThread().getName() )) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">5</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//判断比赛是否结束</span></span><br><span class="line">			<span class="keyword">boolean</span> flag = gameOver(i);</span><br><span class="line">			<span class="comment">//如果比赛结束了，就停止程序</span></span><br><span class="line">			<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">&quot;跑了&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//判断是否完成比赛</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断是否有胜利者</span></span><br><span class="line">		<span class="keyword">if</span>(winner!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(steps==<span class="number">100</span>) &#123;</span><br><span class="line">				winner = Thread.currentThread().getName();</span><br><span class="line">				System.out.println(<span class="string">&quot;winner is &quot;</span>+winner);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-实现Callable接口"><a href="#1-2-3-实现Callable接口" class="headerlink" title="1.2.3 实现Callable接口"></a>1.2.3 实现Callable接口</h4><p>创建线程方式三（了解即可）：实现Callable接口（需要返回值类型）→重写call()方法（需要抛出异常）→创建目标对象→创建关闭服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建方式三：实现Callable接口</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Callable的好处：</span></span><br><span class="line"><span class="comment"> * 1.可以定义返回值</span></span><br><span class="line"><span class="comment"> * 2.可以抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String url,name; <span class="comment">//网络图片地址，保存的文件名</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.url = url;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//下载图片线程执行体</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">		webDownloader.downloader(url, name);</span><br><span class="line">		System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">		TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">		TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">&quot;https://pics6.baidu.com/feed/838ba61ea8d3fd1ffe50b135beb0651894ca5f6d.jpeg?token=34d0744ffdbbc1f2d6ddea302862b052&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建执行服务 </span></span><br><span class="line">		ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//提交执行</span></span><br><span class="line">		Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">		Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">		Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取结果</span></span><br><span class="line">		<span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">		<span class="keyword">boolean</span> rs2 = r2.get();</span><br><span class="line">		<span class="keyword">boolean</span> rs3 = r3.get();</span><br><span class="line">		</span><br><span class="line">		System.out.println(rs1);</span><br><span class="line">		System.out.println(rs2);</span><br><span class="line">		System.out.println(rs3);</span><br><span class="line">		<span class="comment">//关闭服务</span></span><br><span class="line">		ser.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">	<span class="comment">//下载方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.out.println(<span class="string">&quot;IO异常，downloader方法出现问题&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h4><p>语法：(parameters) -&gt; expression 或 (parameters) -&gt;{ statements; }</p>
<p>作用：简化代码，避免匿名内部类定义过多</p>
<p>Function Interface（函数式接口）：只包含唯一一个抽象方法</p>
<p>可以通过lamda表达式来创建函数式接口的对象</p>
<p>推导lambda表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//3.静态内部类</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ILike like = <span class="keyword">new</span> Like();</span><br><span class="line">		like.lambda();</span><br><span class="line">		like = <span class="keyword">new</span> Like2();</span><br><span class="line">		like.lambda();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4.局部内部类</span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">		like = <span class="keyword">new</span> Like3();</span><br><span class="line">		like.lambda();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//5.匿名内部类，没有类的名称，必须借助接口或者父类</span></span><br><span class="line">		like = <span class="keyword">new</span> ILike() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		like.lambda();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//6.用lambda简化</span></span><br><span class="line">		like = () -&gt; &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;I like lambda5&quot;</span>);</span><br><span class="line">		&#125;;</span><br><span class="line">		like.lambda();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;I like lambda&quot;</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化lambda表达式：1.省略参数类型 2.省略括号</p>
<h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>示例（婚庆公司）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        You you = <span class="keyword">new</span> You(); </span><br><span class="line">		you.HappyMarry();</span><br><span class="line">        <span class="comment">//		new Thread(()-&gt;System.out.println(&quot;我爱你&quot;)).start();</span></span><br><span class="line"><span class="comment">//		new WeddingCompany(new You()).HappyMarry();</span></span><br><span class="line">		<span class="comment">//代理</span></span><br><span class="line">		WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(<span class="keyword">new</span> You());</span><br><span class="line">		weddingCompany.HappyMarry();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;结婚了，开心&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Marry target;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.target = target;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		before();</span><br><span class="line">		<span class="keyword">this</span>.target.HappyMarry(); <span class="comment">//真实对象</span></span><br><span class="line">		after();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;结婚之前，布置现场&quot;</span>);		</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>静态代理模式总结：</p>
<ul>
<li>真实对象和代理对象都要实现同一个接口</li>
<li>代理对象代理真实对象</li>
</ul>
<p>好处：</p>
<ul>
<li>代理对象可以做很多真实对象做不了的事情</li>
<li>真实对象专注做自己的事情</li>
</ul>
<h3 id="1-3-线程状态"><a href="#1-3-线程状态" class="headerlink" title="1.3 线程状态"></a>1.3 线程状态</h3><h4 id="1-3-1-五大状态"><a href="#1-3-1-五大状态" class="headerlink" title="1.3.1 五大状态"></a>1.3.1 五大状态</h4><p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/wtCgxA.png" alt="五大状态转换"></p>
<p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/image-20200911102913020.png" alt="线程状态相关方法"></p>
<h4 id="1-3-2-线程停止"><a href="#1-3-2-线程停止" class="headerlink" title="1.3.2 线程停止"></a>1.3.2 线程停止</h4><ul>
<li>不推荐使用JDK提供的stop()、destroy()方法【已废弃】</li>
<li>推荐线程自己停下来（建议使用一标志位进行终止变量）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试stop</span></span><br><span class="line"><span class="comment">//1.建议线程正常停止--&gt;利用次数，不建议死循环</span></span><br><span class="line"><span class="comment">//2.建议使用标志位</span></span><br><span class="line"><span class="comment">//3.不要使用stop或者destroy等过时或者JDK不建议使用的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line">		<span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">			<span class="keyword">if</span>(i == <span class="number">900</span>) &#123;</span><br><span class="line">				<span class="comment">//调用stop()方法切换标志位，让线程停止</span></span><br><span class="line">				testStop.stop();</span><br><span class="line">				System.out.println(<span class="string">&quot;线程停止&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;run ... Thread&quot;</span>+i++);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-线程休眠"><a href="#1-3-3-线程休眠" class="headerlink" title="1.3.3 线程休眠"></a>1.3.3 线程休眠</h4><p>sleep(毫秒)→就绪</p>
<p><strong>每个对象有个锁，sleep不会释放锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟网络延时：放大问题的发生性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="comment">//票数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ticketNum&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//模拟延时</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;			System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了第&quot;</span>+ticketNum--+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TestSleep ticket = <span class="keyword">new</span> TestSleep();</span><br><span class="line">		<span class="keyword">new</span> Thread(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ticket,<span class="string">&quot;老师&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(ticket,<span class="string">&quot;黄牛党&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//模拟倒计时</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			tenDown();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//打印当前系统时间</span></span><br><span class="line">		Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(startTime));</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">				startTime = <span class="keyword">new</span> Date(System.currentTimeMillis()); <span class="comment">//更新当前时间</span></span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			System.out.println(num--);</span><br><span class="line">			<span class="keyword">if</span>(num&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-4-线程礼让"><a href="#1-3-4-线程礼让" class="headerlink" title="1.3.4 线程礼让"></a>1.3.4 线程礼让</h4><p>Yield让当前线程暂停但不阻塞，转为就绪状态</p>
<p><strong>礼让不一定成功</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试礼让线程，礼让不一定成功</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">		<span class="keyword">new</span> Thread(myYield,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(myYield,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">		Thread.yield(); <span class="comment">//礼让</span></span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-5-线程强制执行"><a href="#1-3-5-线程强制执行" class="headerlink" title="1.3.5 线程强制执行"></a>1.3.5 线程强制执行</h4><p>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞（可以看作是插队）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试join方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="comment">//启动我们的线程</span></span><br><span class="line">		TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">		Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">		thread.start();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">200</span>) &#123;</span><br><span class="line">				thread.join();<span class="comment">//插队</span></span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;线程vip来了&quot;</span>+i);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-6-线程优先级"><a href="#1-3-6-线程优先级" class="headerlink" title="1.3.6 线程优先级"></a>1.3.6 线程优先级</h4><p>优先高的不一定先执行，默认是5</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//主线程默认优先级</span></span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">		MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">		Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">		Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">		<span class="comment">//先设置优先级，再启动</span></span><br><span class="line">		t1.start();</span><br><span class="line">		t2.setPriority(<span class="number">1</span>);</span><br><span class="line">		t2.start();</span><br><span class="line">		t3.setPriority(<span class="number">4</span>);</span><br><span class="line">		t3.start();</span><br><span class="line">		t4.setPriority(Thread.MAX_PRIORITY); <span class="comment">//MAX_PRIORITY=10</span></span><br><span class="line">		t4.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;	System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">		</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-7-守护（daemon）线程"><a href="#1-3-7-守护（daemon）线程" class="headerlink" title="1.3.7 守护（daemon）线程"></a>1.3.7 守护（daemon）线程</h4><p>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></p>
<p>虚拟机必须确保用户线程（如，后台记录操作日志，监控内存，垃圾回收等待）执行完毕，但不用等待守护线程执行完毕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试守护线程</span></span><br><span class="line"><span class="comment">//上帝守护你</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		God god = <span class="keyword">new</span> God();</span><br><span class="line">		You you = <span class="keyword">new</span> You();</span><br><span class="line">		Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">		thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//默认是false表示是用户线程，正常的线程都是用户线程</span></span><br><span class="line">		thread.start(); <span class="comment">//守护线程启动</span></span><br><span class="line">		<span class="keyword">new</span> Thread(you).start(); <span class="comment">//用户线程启动</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;上帝保佑着你&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;开心活着&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;====Good bye!====&quot;</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-线程同步"><a href="#1-4-线程同步" class="headerlink" title="1.4 线程同步"></a>1.4 线程同步</h3><p>多个线程操作同一资源（并发）</p>
<p>线程同步是一种<strong>等待机制</strong>，多个需要同时访问同一对象的线程进图该对象的<strong>等待池</strong>形成队列，等待前面线程使用完毕，下一线程再使用</p>
<p>形成条件：队列+锁（synchronized）</p>
<h4 id="1-4-1-同步方法及同步块"><a href="#1-4-1-同步方法及同步块" class="headerlink" title="1.4.1 同步方法及同步块"></a>1.4.1 同步方法及同步块</h4><h5 id="三个不安全案例"><a href="#三个不安全案例" class="headerlink" title="三个不安全案例"></a>三个不安全案例</h5><p>1.不安全的买票</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的买票(线程不安全）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line">		<span class="keyword">new</span> Thread(station,<span class="string">&quot;苦逼的我&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(station,<span class="string">&quot;牛逼的你们&quot;</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(station,<span class="string">&quot;可恶的黄牛党&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//票</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">//外部停止方式</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//买票</span></span><br><span class="line">		<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">			buy();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(ticketNum&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">			flag = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到&quot;</span>+ticketNum--);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.不安全的取钱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的取钱（两个人）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Account account = <span class="keyword">new</span> Account(<span class="number">100</span>,<span class="string">&quot;结婚基金&quot;</span>);</span><br><span class="line">		Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">&quot;你&quot;</span>);</span><br><span class="line">		Drawing GF = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">&quot;女朋友&quot;</span>);</span><br><span class="line">		you.start();</span><br><span class="line">		GF.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> money; <span class="comment">//余额</span></span><br><span class="line">	String name; <span class="comment">//卡名</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.money = money;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	Account account;</span><br><span class="line">	<span class="comment">//取了多少钱</span></span><br><span class="line">	<span class="keyword">int</span> drawingMoney;</span><br><span class="line">	<span class="comment">//现在手里有多少钱</span></span><br><span class="line">	<span class="keyword">int</span> nowMoney;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">		<span class="keyword">this</span>.account = account;</span><br><span class="line">		<span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//取钱</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断有没有钱</span></span><br><span class="line">		<span class="keyword">if</span>(account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">&quot;钱不够，取不了&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//放大问题的发生性</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//卡内余额 = 余额 - 取的钱</span></span><br><span class="line">		account.money = account.money - drawingMoney;</span><br><span class="line">		<span class="comment">//你手里的钱</span></span><br><span class="line">		nowMoney = nowMoney + drawingMoney;</span><br><span class="line">		System.out.println(account.name+<span class="string">&quot;余额为：&quot;</span>+account.money);</span><br><span class="line">		<span class="comment">//Thread.currentThread() == this.getName()</span></span><br><span class="line">		System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;手里的钱：&quot;</span>+nowMoney);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.不安全的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的集合</span></span><br><span class="line"><span class="comment">//添加到同一位置被覆盖</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">				list.add(Thread.currentThread().getName());</span><br><span class="line">			&#125;).start();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(list.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h5><p><strong>同步方法</strong>：public synchronized void method(int args) { }</p>
<p>synchronized方法控制对“对象”的访问，每个对象对象对应一把锁，每个synchronized方法都必须获得调用该方法的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p>
<p><strong>同步块</strong>：synchronized(Obj) { }</p>
<p>Obj称为同步监视器</p>
<ul>
<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>
<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//锁的对象就是变化的量，需要增删改的对象</span></span><br><span class="line">		<span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line">			<span class="comment">//判断有没有钱</span></span><br><span class="line">			<span class="keyword">if</span>(account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">&quot;钱不够，取不了&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//放大问题的发生性</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//卡内余额 = 余额 - 取的钱</span></span><br><span class="line">			account.money = account.money - drawingMoney;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//你手里的钱</span></span><br><span class="line">		nowMoney = nowMoney + drawingMoney;</span><br><span class="line">		System.out.println(account.name+<span class="string">&quot;余额为：&quot;</span>+account.money);</span><br><span class="line">		<span class="comment">//Thread.currentThread() == this.getName()</span></span><br><span class="line">		System.out.println(<span class="keyword">this</span>.getName()+<span class="string">&quot;手里的钱：&quot;</span>+nowMoney);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h5><p>JUC就是java.util .concurrent工具包的简称。这是一个处理线程的工具包，JDK 1.5开始出现的。Callable接口也在JUC中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试JUC安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUC</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">				list.add(Thread.currentThread().getName());</span><br><span class="line">			&#125;).start();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(list.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-死锁"><a href="#1-4-2-死锁" class="headerlink" title="1.4.2 死锁"></a>1.4.2 死锁</h4><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一同步块同时拥有”<strong>两个以上对象的锁</strong>“时，就可能会发生”死锁“的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>,<span class="string">&quot;灰姑娘&quot;</span>);</span><br><span class="line">		Makeup g2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line">		g1.start();</span><br><span class="line">		g2.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="comment">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class="line">	<span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">	<span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> choice; <span class="comment">//选择</span></span><br><span class="line">	String girlName; <span class="comment">//选择化妆品的人</span></span><br><span class="line">	</span><br><span class="line">	Makeup(<span class="keyword">int</span> choice,String girlName)&#123;</span><br><span class="line">		<span class="keyword">this</span>.choice = choice;</span><br><span class="line">		<span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//化妆</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			makeup();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(choice == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(lipstick) &#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">				System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">synchronized</span>(mirror) &#123;</span><br><span class="line">					System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(mirror) &#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">				System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">				Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">synchronized</span>(lipstick) &#123;</span><br><span class="line">					System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>锁中锁（多个对象互相嵌套的锁）使多个线程互相抱着对方需要的资源，然后形成僵持</p>
<p>解决方法：锁分开写，不要同时占有多个资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(choice == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(lipstick) &#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">				System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">synchronized</span>(mirror) &#123;</span><br><span class="line">					System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(mirror) &#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">				System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">				Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">synchronized</span>(lipstick) &#123;</span><br><span class="line">					System.out.println(<span class="keyword">this</span>.girlName+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>产生死锁的四个必要条件：</p>
<ol>
<li>互斥条件</li>
<li>请求与保持条件</li>
<li>不剥夺条件</li>
<li>循环等待条件</li>
</ol>
<h4 id="1-4-3-Lock锁"><a href="#1-4-3-Lock锁" class="headerlink" title="1.4.3 Lock锁"></a>1.4.3 Lock锁</h4><p>从JDK 5.0开始，Java提供了更强大的线程同步机制——<strong>显式</strong>定义同步锁对象来实现同步。同步锁使用Lock对象充当，Lock锁也包含在JUC内</p>
<p>ReentrantLock（可重入锁）类实现了Lock，可以显式加锁、释放锁</p>
<p>使用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">     </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();   <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试Lock类（买票）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试Lock类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TestLock2 testLock2 = <span class="keyword">new</span> TestLock2(); </span><br><span class="line">		<span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义Lock锁</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			lock.lock();<span class="comment">//加锁</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">					System.out.println(ticketNum--);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="comment">//解锁</span></span><br><span class="line">				lock.unlock();</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized与Lock对比</p>
<ul>
<li>Lock是显式锁（手动开启和关闭锁），synchronized是隐式锁，自动释放</li>
<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多子类）</li>
</ul>
<h4 id="1-4-4-线程通信"><a href="#1-4-4-线程通信" class="headerlink" title="1.4.4 线程通信"></a>1.4.4 线程通信</h4><p>线程通信方法：</p>
<p><img src="http://typora-imagehosting.oss-cn-shanghai.aliyuncs.com/img/%E6%8D%95%E8%8E%B7.PNG" alt="线程通信方法"></p>
<p>注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常</p>
<h5 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h5><p>解决方法：</p>
<ol>
<li><p>利用缓冲区解决：管程法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试生产者消费者模型--&gt;利用缓冲区解决：管程法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者，消费者，产品，缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SynContainer container = <span class="keyword">new</span> SynContainer();		</span><br><span class="line">		<span class="keyword">new</span> Producer(container).start();</span><br><span class="line">		<span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	SynContainer container;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.container = container;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//生产</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">			System.out.println(<span class="string">&quot;生产了第&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	SynContainer container;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.container = container;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//消费</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;消费了第&quot;</span>+container.pop().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">			&#125;		</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> id; <span class="comment">//产品编号</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line">	<span class="comment">//需要一个容器大小</span></span><br><span class="line">	Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">	<span class="comment">//容器计数器</span></span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//生产者放入产品</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">		<span class="keyword">if</span>(count == chickens.length) &#123;</span><br><span class="line">			<span class="comment">//通知消费者消费，生产等待</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果没有满，我们就需要丢入产品</span></span><br><span class="line">		chickens[count] = chicken;</span><br><span class="line">		count++;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//可以通知消费者消费了</span></span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//消费者消费产品</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//判断能否消费</span></span><br><span class="line">		<span class="keyword">if</span>(count==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//等待生产者生产</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果可以消费</span></span><br><span class="line">		count--;</span><br><span class="line">		Chicken chicken = chickens[count];	</span><br><span class="line">		<span class="comment">//吃完了，通知生产者生产</span></span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">		<span class="keyword">return</span> chicken;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用标志位解决：信号灯法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhg.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试生产者消费者模型2--&gt;利用标志位解决：信号灯法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">		<span class="keyword">new</span> Player(tv).start();</span><br><span class="line">		<span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者--&gt;演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	TV tv;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.tv = tv;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.tv.play(<span class="string">&quot;快乐大本营&quot;</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.tv.play(<span class="string">&quot;广告&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者--&gt;观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	TV tv;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.tv = tv;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">			tv.watch();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品--&gt;节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//演员表演，观众等待 T</span></span><br><span class="line">	<span class="comment">//观众观看，演员等待 F</span></span><br><span class="line">	String voice;<span class="comment">//表演的节目</span></span><br><span class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//表演</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;演员表演了：&quot;</span>+voice);</span><br><span class="line">		<span class="comment">//通知观众观看</span></span><br><span class="line">		<span class="keyword">this</span>.notifyAll(); <span class="comment">//通知唤醒</span></span><br><span class="line">		<span class="keyword">this</span>.voice = voice;</span><br><span class="line">		<span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//观看</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;观众观看了：&quot;</span>+voice);</span><br><span class="line">		<span class="comment">//通知演员表演</span></span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">		<span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>背景：经常创建和销毁，使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</p>
<p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。</p>
<p>好处：</p>
<ul>
<li>提高响应速度</li>
<li>降低资源消耗</li>
<li>便于线程管理</li>
</ul>
<p>JDK 5.0起提供了线程池相关API：ExecutorService和Executors</p>
<ul>
<li><p>ExecutorService：真正的线程池接口。</p>
</li>
<li><p>Executor：工具类、线程池的工厂类，用于创建并返回不同类型的线程池。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1.创建服务，创建线程池</span></span><br><span class="line">		<span class="comment">//newFixedThreadPool 参数为线程池大小</span></span><br><span class="line">		ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">		service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">		service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">		service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">		service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">		<span class="comment">//2.关闭连接</span></span><br><span class="line">		service.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JavaSE</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
</search>
